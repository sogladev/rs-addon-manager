name: Build

on:
  push:
    branches: ['main']
  pull_request:
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: moonrepo/setup-rust@v1
        with:
          components: clippy, rustfmt
      - name: format
        run: |
          cargo fmt --version
          cargo fmt --all -- --check
      - name: lint
        run: |
          cargo clippy --version
          cargo clippy -- -D warnings
      - name: test
        run: cargo test --verbose

  build-cli:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: moonrepo/setup-rust@v1
        with:
          targets: x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu
      - name: Prepare dist directory
        run: mkdir -p dist/cli
      - name: Copy LICENSE to dist
        run: cp LICENSE dist/
      - name: Build Linux
        run: |
          cd downloader-cli
          cargo build --locked --release --target x86_64-unknown-linux-gnu
          mv ../target/x86_64-unknown-linux-gnu/release/downloader-cli ../dist/cli/downloader-cli-linux-x86_64
      - name: Setup Windows - Install mingw-w64
        run: sudo apt-get install -y mingw-w64
      - name: Build Windows
        run: |
          cd downloader-cli
          cargo build --locked --release --target x86_64-pc-windows-gnu
          mv ../target/x86_64-pc-windows-gnu/release/downloader-cli.exe ../dist/cli/downloader-cli-windows-x86_64.exe
      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-artifacts
          path: dist/cli/
          retention-days: 3

  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: bun install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}